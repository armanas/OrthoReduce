"""
Test suite for advanced plotting utilities in OrthoReduce.

Tests the AdvancedPlotter class and associated plotting functions to ensure
they work correctly with various input types and configurations.
"""

import pytest
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import tempfile
import shutil
from unittest.mock import patch

# Test imports
try:\n    from orthogonal_projection.advanced_plotting import (\n        AdvancedPlotter, InteractivePlotter,\n        plot_embedding_comparison, quick_embedding_plot,\n        plot_specialized_embedding, setup_enhanced_plotting\n    )\n    from orthogonal_projection.dimensionality_reduction import (\n        generate_mixture_gaussians, run_pca, run_jll\n    )\n    ADVANCED_PLOTTING_AVAILABLE = True\nexcept ImportError:\n    ADVANCED_PLOTTING_AVAILABLE = False\n    \n@pytest.mark.skipif(not ADVANCED_PLOTTING_AVAILABLE, reason=\"Advanced plotting not available\")\nclass TestAdvancedPlotter:\n    \"\"\"Test suite for AdvancedPlotter class.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        self.plotter = AdvancedPlotter(output_dir=self.temp_dir, style=\"publication\")\n        \n        # Generate test data\n        np.random.seed(42)\n        self.X = generate_mixture_gaussians(100, 20, n_clusters=3, cluster_std=0.5)\n        self.Y_2d, _ = run_pca(self.X, 2, seed=42)\n        self.Y_3d, _ = run_pca(self.X, 3, seed=42)\n        self.labels = np.repeat(range(3), 100 // 3)[:100]\n        \n    def teardown_method(self):\n        \"\"\"Clean up test environment.\"\"\"\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n        plt.close('all')  # Close any open figures\n    \n    def test_plot_embedding_2d_basic(self):\n        \"\"\"Test basic 2D embedding plot.\"\"\"\n        fig = self.plotter.plot_embedding_2d(\n            self.Y_2d,\n            title=\"Test 2D Embedding\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) == 1\n        \n        # Check that points are plotted\n        ax = fig.axes[0]\n        assert len(ax.collections) > 0  # Should have scatter plot\n        \n    def test_plot_embedding_2d_with_labels(self):\n        \"\"\"Test 2D embedding plot with labels.\"\"\"\n        fig = self.plotter.plot_embedding_2d(\n            self.Y_2d,\n            labels=self.labels,\n            title=\"Test 2D Embedding with Labels\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) >= 1  # May have colorbar\n        \n    def test_plot_embedding_2d_with_density(self):\n        \"\"\"Test 2D embedding plot with density contours.\"\"\"\n        fig = self.plotter.plot_embedding_2d(\n            self.Y_2d,\n            title=\"Test 2D Embedding with Density\",\n            method_name=\"PCA\",\n            show_density=True\n        )\n        \n        assert fig is not None\n        \n    def test_plot_embedding_2d_with_hull(self):\n        \"\"\"Test 2D embedding plot with convex hull.\"\"\"\n        fig = self.plotter.plot_embedding_2d(\n            self.Y_2d,\n            title=\"Test 2D Embedding with Hull\",\n            method_name=\"PCA\",\n            show_hull=True\n        )\n        \n        assert fig is not None\n        \n    def test_plot_embedding_3d_basic(self):\n        \"\"\"Test basic 3D embedding plot.\"\"\"\n        fig = self.plotter.plot_embedding_3d(\n            self.Y_3d,\n            title=\"Test 3D Embedding\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) == 1\n        \n    def test_plot_embedding_3d_with_labels(self):\n        \"\"\"Test 3D embedding plot with labels.\"\"\"\n        fig = self.plotter.plot_embedding_3d(\n            self.Y_3d,\n            labels=self.labels,\n            title=\"Test 3D Embedding with Labels\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        \n    def test_plot_method_comparison_grid(self):\n        \"\"\"Test method comparison grid.\"\"\"\n        # Create multiple embeddings\n        Y_jll, _ = run_jll(self.X, 2, seed=42)\n        embeddings = {\n            'PCA': self.Y_2d,\n            'JLL': Y_jll\n        }\n        \n        fig = self.plotter.plot_method_comparison_grid(\n            embeddings,\n            labels=self.labels,\n            title=\"Test Method Comparison\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) >= 2  # At least one subplot per method\n        \n    def test_plot_method_overlay(self):\n        \"\"\"Test method overlay comparison.\"\"\"\n        Y_jll, _ = run_jll(self.X, 2, seed=42)\n        embeddings = {\n            'PCA': self.Y_2d,\n            'JLL': Y_jll\n        }\n        \n        fig = self.plotter.plot_method_overlay(\n            embeddings,\n            title=\"Test Method Overlay\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) == 1\n        \n        # Should have multiple scatter series\n        ax = fig.axes[0]\n        assert len(ax.collections) >= 2\n        \n    def test_plot_spherical_embedding(self):\n        \"\"\"Test spherical embedding plot.\"\"\"\n        # Normalize to unit sphere\n        Y_normalized = self.Y_3d / np.linalg.norm(self.Y_3d, axis=1, keepdims=True)\n        \n        fig = self.plotter.plot_spherical_embedding(\n            Y_normalized,\n            labels=self.labels,\n            title=\"Test Spherical Embedding\",\n            show_wireframe=True\n        )\n        \n        assert fig is not None\n        \n    def test_plot_poincare_disk(self):\n        \"\"\"Test Poincaré disk plot.\"\"\"\n        # Scale to be within unit disk\n        Y_poincare = 0.8 * self.Y_2d / (np.linalg.norm(self.Y_2d, axis=1, keepdims=True) + 1)\n        \n        fig = self.plotter.plot_poincare_disk(\n            Y_poincare,\n            labels=self.labels,\n            title=\"Test Poincaré Disk\",\n            show_boundary=True\n        )\n        \n        assert fig is not None\n        \n    def test_plot_trustworthiness_continuity(self):\n        \"\"\"Test trustworthiness and continuity plots.\"\"\"\n        # Mock data\n        trust_cont_data = {\n            'PCA': {\n                'trustworthiness': {10: 0.8, 20: 0.7, 50: 0.6},\n                'continuity': {10: 0.85, 20: 0.75, 50: 0.65}\n            },\n            'JLL': {\n                'trustworthiness': {10: 0.75, 20: 0.65, 50: 0.55},\n                'continuity': {10: 0.8, 20: 0.7, 50: 0.6}\n            }\n        }\n        \n        fig = self.plotter.plot_trustworthiness_continuity(\n            trust_cont_data,\n            title=\"Test Trust/Continuity\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) == 2  # Two subplots\n        \n    def test_plot_correlation_heatmap(self):\n        \"\"\"Test correlation heatmap.\"\"\"\n        correlation_data = {\n            'PCA': {'spearman': 0.85, 'kendall': 0.75, 'pearson': 0.80},\n            'JLL': {'spearman': 0.75, 'kendall': 0.65, 'pearson': 0.70}\n        }\n        \n        fig = self.plotter.plot_correlation_heatmap(\n            correlation_data,\n            title=\"Test Correlation Heatmap\"\n        )\n        \n        assert fig is not None\n        \n    def test_plot_stress_decomposition(self):\n        \"\"\"Test stress decomposition plot.\"\"\"\n        stress_data = {\n            'PCA': {'local_stress': 0.1, 'global_stress': 0.2, 'total_stress': 0.3},\n            'JLL': {'local_stress': 0.15, 'global_stress': 0.25, 'total_stress': 0.4}\n        }\n        \n        fig = self.plotter.plot_stress_decomposition(\n            stress_data,\n            title=\"Test Stress Decomposition\"\n        )\n        \n        assert fig is not None\n        assert len(fig.axes) == 2  # Two subplots\n        \n    def test_plot_loss_convergence(self):\n        \"\"\"Test loss convergence plot.\"\"\"\n        loss_histories = {\n            'Method1': [1.0, 0.5, 0.25, 0.125, 0.1],\n            'Method2': [0.8, 0.4, 0.3, 0.2, 0.15]\n        }\n        \n        fig = self.plotter.plot_loss_convergence(\n            loss_histories,\n            title=\"Test Loss Convergence\"\n        )\n        \n        assert fig is not None\n        \n    def test_create_multi_metric_dashboard(self):\n        \"\"\"Test multi-metric dashboard creation.\"\"\"\n        results = {\n            'PCA': {\n                'runtime': 0.01,\n                'compression_ratio': 10.0,\n                'mean_distortion': 0.1,\n                'rank_correlation': 0.85,\n                'trustworthiness': {10: 0.8, 20: 0.7},\n                'sammon_stress': {'local_stress': 0.1, 'global_stress': 0.2}\n            }\n        }\n        \n        embeddings = {'PCA': self.Y_2d}\n        \n        fig = self.plotter.create_multi_metric_dashboard(\n            results, embeddings,\n            title=\"Test Dashboard\"\n        )\n        \n        assert fig is not None\n        \n    def test_save_functionality(self):\n        \"\"\"Test that plots can be saved to files.\"\"\"\n        save_path = Path(self.temp_dir) / \"test_plot.png\"\n        \n        fig = self.plotter.plot_embedding_2d(\n            self.Y_2d,\n            title=\"Test Save\",\n            method_name=\"PCA\",\n            save_path=str(save_path)\n        )\n        \n        assert fig is not None\n        assert save_path.exists()\n        \n\n@pytest.mark.skipif(not ADVANCED_PLOTTING_AVAILABLE, reason=\"Advanced plotting not available\")\nclass TestConvenienceFunctions:\n    \"\"\"Test convenience functions for plotting.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        \n        # Generate test data\n        np.random.seed(42)\n        self.X = generate_mixture_gaussians(50, 15, n_clusters=2)\n        self.Y_pca, _ = run_pca(self.X, 2, seed=42)\n        self.Y_jll, _ = run_jll(self.X, 2, seed=42)\n        self.labels = np.repeat(range(2), 50 // 2)[:50]\n        \n    def teardown_method(self):\n        \"\"\"Clean up test environment.\"\"\"\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n        plt.close('all')\n    \n    def test_plot_embedding_comparison_grid(self):\n        \"\"\"Test embedding comparison with grid style.\"\"\"\n        embeddings = {\n            'PCA': self.Y_pca,\n            'JLL': self.Y_jll\n        }\n        \n        fig = plot_embedding_comparison(\n            embeddings,\n            labels=self.labels,\n            style=\"grid\",\n            title=\"Test Grid Comparison\"\n        )\n        \n        assert fig is not None\n        \n    def test_plot_embedding_comparison_overlay(self):\n        \"\"\"Test embedding comparison with overlay style.\"\"\"\n        embeddings = {\n            'PCA': self.Y_pca,\n            'JLL': self.Y_jll\n        }\n        \n        fig = plot_embedding_comparison(\n            embeddings,\n            style=\"overlay\",\n            title=\"Test Overlay Comparison\"\n        )\n        \n        assert fig is not None\n        \n    def test_quick_embedding_plot_2d(self):\n        \"\"\"Test quick embedding plot for 2D data.\"\"\"\n        fig = quick_embedding_plot(\n            self.Y_pca,\n            labels=self.labels,\n            method_name=\"PCA\",\n            title=\"Test Quick Plot\"\n        )\n        \n        assert fig is not None\n        \n    def test_quick_embedding_plot_3d(self):\n        \"\"\"Test quick embedding plot for 3D data.\"\"\"\n        Y_3d, _ = run_pca(self.X, 3, seed=42)\n        \n        fig = quick_embedding_plot(\n            Y_3d,\n            labels=self.labels,\n            method_name=\"PCA\",\n            title=\"Test Quick 3D Plot\"\n        )\n        \n        assert fig is not None\n        \n    def test_plot_specialized_embedding_spherical(self):\n        \"\"\"Test specialized spherical embedding plot.\"\"\"\n        # Create normalized 3D data\n        Y_3d, _ = run_pca(self.X, 3, seed=42)\n        Y_normalized = Y_3d / np.linalg.norm(Y_3d, axis=1, keepdims=True)\n        \n        fig = plot_specialized_embedding(\n            Y_normalized,\n            embedding_type=\"spherical\",\n            labels=self.labels,\n            title=\"Test Spherical\"\n        )\n        \n        assert fig is not None\n        \n    def test_plot_specialized_embedding_poincare(self):\n        \"\"\"Test specialized Poincaré embedding plot.\"\"\"\n        # Scale to unit disk\n        Y_poincare = 0.8 * self.Y_pca / (np.linalg.norm(self.Y_pca, axis=1, keepdims=True) + 1)\n        \n        fig = plot_specialized_embedding(\n            Y_poincare,\n            embedding_type=\"poincare\",\n            labels=self.labels,\n            title=\"Test Poincaré\"\n        )\n        \n        assert fig is not None\n        \n    def test_setup_enhanced_plotting(self):\n        \"\"\"Test plotting setup function.\"\"\"\n        # Should not raise any exceptions\n        setup_enhanced_plotting()\n        \n        # Check that matplotlib parameters are set\n        import matplotlib.pyplot as plt\n        assert plt.rcParams['figure.dpi'] == 300\n        assert plt.rcParams['figure.facecolor'] == 'white'\n        \n\n@pytest.mark.skipif(not ADVANCED_PLOTTING_AVAILABLE, reason=\"Advanced plotting not available\")\nclass TestInteractivePlotter:\n    \"\"\"Test suite for InteractivePlotter class.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        try:\n            self.temp_dir = tempfile.mkdtemp()\n            self.interactive_plotter = InteractivePlotter(output_dir=self.temp_dir)\n            \n            # Generate test data\n            np.random.seed(42)\n            self.X = generate_mixture_gaussians(30, 10, n_clusters=2)\n            self.Y_2d, _ = run_pca(self.X, 2, seed=42)\n            self.Y_3d, _ = run_pca(self.X, 3, seed=42)\n            self.labels = np.repeat(range(2), 30 // 2)[:30]\n            \n            self.plotly_available = True\n            \n        except ImportError:\n            self.plotly_available = False\n            \n    def teardown_method(self):\n        \"\"\"Clean up test environment.\"\"\"\n        if hasattr(self, 'temp_dir'):\n            shutil.rmtree(self.temp_dir, ignore_errors=True)\n    \n    @pytest.mark.skipif(not hasattr(pytest, 'importorskip'), reason=\"Need pytest.importorskip\")\n    def test_plot_embedding_interactive_2d(self):\n        \"\"\"Test interactive 2D embedding plot.\"\"\"\n        if not self.plotly_available:\n            pytest.skip(\"Plotly not available\")\n            \n        fig = self.interactive_plotter.plot_embedding_interactive(\n            self.Y_2d,\n            labels=self.labels,\n            title=\"Test Interactive 2D\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        \n    @pytest.mark.skipif(not hasattr(pytest, 'importorskip'), reason=\"Need pytest.importorskip\")\n    def test_plot_embedding_interactive_3d(self):\n        \"\"\"Test interactive 3D embedding plot.\"\"\"\n        if not self.plotly_available:\n            pytest.skip(\"Plotly not available\")\n            \n        fig = self.interactive_plotter.plot_embedding_interactive(\n            self.Y_3d,\n            labels=self.labels,\n            title=\"Test Interactive 3D\",\n            method_name=\"PCA\"\n        )\n        \n        assert fig is not None\n        \n\nclass TestErrorHandling:\n    \"\"\"Test error handling and edge cases.\"\"\"\n    \n    def test_advanced_plotting_import_error(self):\n        \"\"\"Test graceful handling when advanced plotting is not available.\"\"\"\n        with patch('orthogonal_projection.advanced_plotting.PLOTLY_AVAILABLE', False):\n            # Should not raise exception even if plotly features are unavailable\n            pass\n    \n    def test_empty_data_handling(self):\n        \"\"\"Test handling of empty or invalid data.\"\"\"\n        if not ADVANCED_PLOTTING_AVAILABLE:\n            pytest.skip(\"Advanced plotting not available\")\n            \n        plotter = AdvancedPlotter()\n        \n        # Test with empty arrays\n        empty_data = np.array([]).reshape(0, 2)\n        \n        # Should handle gracefully without crashing\n        try:\n            fig = plotter.plot_embedding_2d(\n                empty_data,\n                title=\"Empty Data Test\",\n                method_name=\"Test\"\n            )\n            # If it doesn't crash, that's good\n            if fig is not None:\n                plt.close(fig)\n        except Exception:\n            # Expected for empty data\n            pass\n    \n    def test_invalid_dimensions(self):\n        \"\"\"Test handling of invalid data dimensions.\"\"\"\n        if not ADVANCED_PLOTTING_AVAILABLE:\n            pytest.skip(\"Advanced plotting not available\")\n        \n        # Test with wrong dimensions\n        with pytest.raises(ValueError):\n            quick_embedding_plot(\n                np.random.randn(10, 1),  # 1D data\n                method_name=\"Test\"\n            )\n"